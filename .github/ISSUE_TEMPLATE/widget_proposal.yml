name: Widget proposal
description: Propose a new NebulaDesk widget (declarative JSON + optional logic)
title: "[Widget]: "
labels: ["widget"]

body:
  - type: markdown
    attributes:
      value: |
        ## ðŸ§© Widget Proposal
        Provide enough detail for us to evaluate security, UX, and feasibility.

  - type: input
    id: widget_name
    attributes:
      label: Widget name
      placeholder: "Example: Currency Converter"
    validations:
      required: true

  - type: textarea
    id: purpose
    attributes:
      label: Purpose / user story
      description: "What problem does this widget solve? Who is it for?"
      placeholder: |
        As a traveler, I want to convert TRYâ†”EUR quickly to decide whether to pay cash or card.
    validations:
      required: true

  - type: dropdown
    id: category
    attributes:
      label: Category
      options:
        - Finance
        - Travel
        - Productivity
        - Utilities
        - Health
        - Education
        - Other
    validations:
      required: true

  - type: checkboxes
    id: permissions
    attributes:
      label: Requested permissions (least-privilege)
      options:
        - label: Storage (read/write local state)
        - label: Network (fetch public data from the web)
        - label: Crypto (local encrypt/decrypt helpers)

  - type: textarea
    id: data_sources
    attributes:
      label: Data sources (if any)
      description: "List APIs or endpoints if Network is needed."
      placeholder: |
        Example: https://api.exchangerate.host/latest (GET)

  - type: textarea
    id: ui_layout
    attributes:
      label: Draft UI layout (JSON)
      description: "Declarative UI (fields, controls)."
      placeholder: |
        {
          "ui": {
            "layout": [
              { "component": "number", "id": "amount", "label": "Amount" },
              { "component": "select", "id": "from", "label": "From", "options": ["TRY","EUR"] },
              { "component": "select", "id": "to", "label": "To", "options": ["TRY","EUR"] }
            ]
          }
        }
      render: json

  - type: textarea
    id: logic
    attributes:
      label: Logic (pseudo or minimal code)
      description: "Use simple expressions; no DOM access. Example: onChange rules."
      placeholder: |
        onChange:
          - when: "amount"
            do: "state.result = round(state.amount * state.rate, 2)"

  - type: textarea
    id: security
    attributes:
      label: Security considerations
      description: "Why are requested permissions necessary? Any privacy concerns?"
      placeholder: "Example: Needs Network only to fetch public FX rates; no PII; caching to local storage."
    validations:
      required: true

  - type: textarea
    id: acceptance
    attributes:
      label: Acceptance criteria
      description: "Define testable outcomes."
      placeholder: |
        - Converts between TRY and EUR to 2dp
        - Works offline with last-known rate
        - No console errors; passes CSP
    validations:
      required: true

  - type: checkboxes
    id: confirmation
    attributes:
      label: Confirmation
      options:
        - label: I searched existing issues to avoid duplicates.
          required: true
        - label: I agree to license my contribution under the projectâ€™s license.
          required: true
